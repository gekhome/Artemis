@{
    Layout = null;
}

@(Html.Kendo().Grid<FilmCountryViewModel>()
    .Name("gridCountries")
    .HtmlAttributes(new { style = "font-size:14px" })
    .Columns(columns =>
    {
        columns.ForeignKey(m => m.CountryId, (IEnumerable<Country>)ViewData["countries"]!, "CountryId", "Name")
            .Width(200).Media("(min-width: 200px)");
        columns.Command(command => { command.Destroy(); }).Width(100);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create();
        toolbar.Save();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Navigatable()
    .Sortable()
    .Filterable()
    .Scrollable(scr => scr.Height(250))
    .Pageable(pageable => pageable
    .Refresh(true)
    .PageSizes(true)
    .ButtonCount(5))
    .DataSource(source => source
    .Ajax()
    .PageSize(40)
    .Batch(true)
    .ServerOperation(false)
    .Model(model =>
    {
        model.Id(m => m.Id);
        model.Field(m => m.CountryId).DefaultValue(ViewData["defaultCountry"]);
    })
    .Create(create => create.Url("FilmSecondary?handler=CountryCreate").Data("forgeryToken"))
    .Read(read => read.Url("FilmSecondary?handler=CountryRead").Data("forgeryToken"))
    .Update(update => update.Url("FilmSecondary?handler=CountryUpdate").Data("forgeryToken"))
    .Destroy(destroy => destroy.Url("FilmSecondary?handler=CountryDestroy").Data("forgeryToken"))
    .Events(events => events.Error("error_handler"))
    )
)

