
@{
    Layout = null;
}

@(Html.Kendo().Grid<FilmCompanyViewModel>()
        .Name("gridCompanies")
        .HtmlAttributes(new { style = "font-size:14px" })
        .Columns(columns =>
        {
            columns.ForeignKey(m => m.StudioId, (IEnumerable<MovieStudio>)ViewData["companies"]!, "StudioId", "Name")
            .Width(200).Media("(min-width: 200px)");
            columns.Command(command => { command.Destroy(); }).Width(100);
        })
        .ToolBar(toolbar =>
        {
            toolbar.Create();
            toolbar.Save();
        })
        .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Navigatable()
        .Sortable()
        .Filterable()
        .Scrollable(scr => scr.Height(250))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .DataSource(source => source
        .Ajax()
        .PageSize(40)
        .Batch(true)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(m => m.Id);
            model.Field(m => m.StudioId).DefaultValue(ViewData["defaultCompany"]);
        })
        .Create(create => create.Url("FilmSecondary?handler=CompanyCreate").Data("forgeryToken"))
        .Read(read => read.Url("FilmSecondary?handler=CompanyRead").Data("forgeryToken"))
        .Update(update => update.Url("FilmSecondary?handler=CompanyUpdate").Data("forgeryToken"))
        .Destroy(destroy => destroy.Url("FilmSecondary?handler=CompanyDestroy").Data("forgeryToken"))
        .Events(events => events.Error("error_handler"))
        )
    )
