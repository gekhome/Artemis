@page
@model Artemis.Pages.Movies.StudiosFilmsModel

@{
    ViewData["Title"] = "Studios and films";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@Html.AntiForgeryToken()


<div class="container-fluid">
    <div class="d-flex justify-content-between">
        <page-header add-title="Movie studios and films"></page-header>
        <div class="d-flex float-end me-2"><a class="gek-btn-primary" asp-action="Index" asp-controller="Home">Home</a></div>
    </div>
    <hr />

    <div class="mt-2">
        @(Html.Kendo().Grid<StudiosInFilms>()
            .Name("master")
            .Columns(columns =>
            {
                columns.Bound(m => m.LogoImage).Filterable(false).Title("Logo").Width(60).ClientTemplate(
                @"<div class='text-center'><img class='rectangle-photo' " + "src=\"data:image/*;base64, #:LogoImage#\" /></div>");
                columns.Bound(m => m.Name).Width(300);
            })
            .ToolBar(toolbar =>
            {
                toolbar.Search();
            })
            .Filterable()
            .Selectable()
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .Sortable()
            .Scrollable(scr => scr.Height(300))
            .DataSource(dataSource => dataSource
            .Ajax()
            .ServerOperation(false)
            .PageSize(40)
            .Model(model =>
            {
                model.Id(m => m.StudioId);
            })
            .Read(read => read.Url("/Movies/StudiosFilms?handler=Studios_Read").Data("forgeryToken"))
            )
            .Events(e => e.Change("onChange"))
        )
    </div>

    <div class="mt-4">
        @(Html.Kendo().Grid<FilmViewModel>()
            .Name("child")
            .Columns(columns =>
            {
                columns.Bound(m => m.PosterImage).ClientTemplate(
                @"<div class='text-center'><img class='grid-photo' " + "src=\"data:image/*;base64, #:PosterImage#\" /></div>")
                .Filterable(false).Width(80).Media("(min-width: 100px)");
                columns.Bound(m => m.Title).Width(400).Media("(min-width: 400px)");
                columns.Bound(m => m.ReleaseDate).Format("{0:dd/MM/yyyy}").Width(160).Media("(min-width: 300px)");
                columns.Bound(m => m.ReleaseYear).Title("Year").Width(150);
                columns.Bound(m => m.Rating).Format("{0:0}/10").Width(150).Media("(min-width: 150px)");
                columns.Bound(m => m.RunningTime).Width(200).Title("Running time (min)").Media("(min-width: 200px)");
            })
            .Sortable()
            .Filterable()
            .ColumnMenu(false)
            .Scrollable(scr => scr.Height(300))
            .Pageable(pageable => pageable
            .Refresh(true)
            .PageSizes(true)
            .ButtonCount(5))
            .DataSource(source => source
            .Ajax()
            .Batch(true)
            .PageSize(60)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(m => m.FilmId);
            })
            .Read(read => read.Url("/Movies/StudiosFilms?handler=Films_Read&studioId=#=StudioId#").Data("forgeryToken"))
            )
            .ClientDetailTemplateId("detail-template")
            )
    </div>

</div>


@section Scripts
{
    <script type="text/template" id="detail-template">

        <div class="card card-outline-secondary m-1 p-1">
            <div class="d-inline-flex flex-row">
                <img src="data:image/*;base64, #:PosterImage#" class="me-4 poster" width="150" height="200"/>
                <div class="d-inline-flex flex-column mt-2">
                    <h4>#: Title # &nbsp;#: ReleaseYear #</h4>
                    <p class="long-text" style="max-width:800px"><i>#: PlotSummary #</i></p>
                    <p><label class="fw-semibold">Director:&nbsp;</label>#: Director #</p>
                    <p class="long-text" style="max-width:800px"><label class="fw-semibold">Producer(s):&nbsp;</label>#: Producer #</p>
                    <p><label class="fw-semibold">Running time:&nbsp;</label>#: RunningTime # mins</p>

                    # var budget = parseInt(Budget).toLocaleString(); #
                    # var boxOffice = parseInt(BoxOffice).toLocaleString(); #
                    <div class="d-inline-flex flex-row">
                        <label class="fw-semibold">Budget: &nbsp;</label>$#: budget # &nbsp;&nbsp;
                        <label class="fw-semibold">Box office: &nbsp;</label>$#: boxOffice #
                    </div>
                    <label class="fw-semibold mt-2">Genres:</label>
                    <div class="mt-2">
                        # var genreArray = Genres.split(','); #
                        # for (var i = 0; i < genreArray.length; i++) { #
                            <label class="tag">#: genreArray[i] #</label>
                        # } #
                    </div>
                </div>
            </div>
        </div>

    </script>

    <script type="text/javascript">

        function forgeryToken() {
            return kendo.antiForgeryTokens();
        }

        function onChange() {
            var dataItem = this.dataItem(this.select());
            var studioID = dataItem.StudioId;
            $("#child").data("kendoGrid").dataSource.read({ studioId: studioID });
        }

    </script>
}