// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Artemis.Dal.Models;
using Microsoft.EntityFrameworkCore;

namespace Artemis.Dal.Data;

public partial class ArtemisDbContext : DbContext
{
    public ArtemisDbContext(DbContextOptions<ArtemisDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Actor> Actor { get; set; }

    public virtual DbSet<ActorCountRegions> ActorCountRegions { get; set; }

    public virtual DbSet<ActorFilms> ActorFilms { get; set; }

    public virtual DbSet<ActorGallery> ActorGallery { get; set; }

    public virtual DbSet<ActorGenderCount> ActorGenderCount { get; set; }

    public virtual DbSet<ActorInfo> ActorInfo { get; set; }

    public virtual DbSet<ActorRatingCount> ActorRatingCount { get; set; }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<Film> Film { get; set; }

    public virtual DbSet<FilmActor> FilmActor { get; set; }

    public virtual DbSet<FilmActors> FilmActors { get; set; }

    public virtual DbSet<FilmCompany> FilmCompany { get; set; }

    public virtual DbSet<FilmCountry> FilmCountry { get; set; }

    public virtual DbSet<FilmInfo> FilmInfo { get; set; }

    public virtual DbSet<Genders> Genders { get; set; }

    public virtual DbSet<Languages> Languages { get; set; }

    public virtual DbSet<MovieGenre> MovieGenre { get; set; }

    public virtual DbSet<MovieStudio> MovieStudio { get; set; }

    public virtual DbSet<MusicGenre> MusicGenre { get; set; }

    public virtual DbSet<MusicStudio> MusicStudio { get; set; }

    public virtual DbSet<Regions> Regions { get; set; }

    public virtual DbSet<StudiosInFilms> StudiosInFilms { get; set; }

    public virtual DbSet<Years> Years { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Actor>(entity =>
        {
            entity.Property(e => e.Age).HasComputedColumnSql("(datediff(year,[BirthDate],getdate()))", false);
        });

        modelBuilder.Entity<ActorCountRegions>(entity =>
        {
            entity.ToView("ActorCountRegions");
        });

        modelBuilder.Entity<ActorFilms>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ActorFilmography");

            entity.HasOne(d => d.Actor).WithMany(p => p.ActorFilms)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActorFilms_Actor");
        });

        modelBuilder.Entity<ActorGallery>(entity =>
        {
            entity.HasOne(d => d.Actor).WithMany(p => p.ActorGallery)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActorGallery_Actor");
        });

        modelBuilder.Entity<ActorGenderCount>(entity =>
        {
            entity.ToView("ActorGenderCount");
        });

        modelBuilder.Entity<ActorInfo>(entity =>
        {
            entity.ToView("ActorInfo");
        });

        modelBuilder.Entity<ActorRatingCount>(entity =>
        {
            entity.ToView("ActorRatingCount");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasOne(d => d.RegionNavigation).WithMany(p => p.Country).HasConstraintName("FK_Country_Regions");
        });

        modelBuilder.Entity<Film>(entity =>
        {
            entity.Property(e => e.ReleaseYear).HasComputedColumnSql("(datepart(year,[ReleaseDate]))", true);
        });

        modelBuilder.Entity<FilmActor>(entity =>
        {
            entity.HasOne(d => d.Actor).WithMany(p => p.FilmActor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FilmActor_Actor");

            entity.HasOne(d => d.Film).WithMany(p => p.FilmActor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FilmActor_Film");
        });

        modelBuilder.Entity<FilmActors>(entity =>
        {
            entity.ToView("FilmActors");
        });

        modelBuilder.Entity<FilmCompany>(entity =>
        {
            entity.HasOne(d => d.Film).WithMany(p => p.FilmCompany)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FilmCompany_Film");

            entity.HasOne(d => d.Studio).WithMany(p => p.FilmCompany)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FilmCompany_MovieStudio");
        });

        modelBuilder.Entity<FilmCountry>(entity =>
        {
            entity.HasOne(d => d.Country).WithMany(p => p.FilmCountry)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FilmCountry_Country");

            entity.HasOne(d => d.Film).WithMany(p => p.FilmCountry)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FilmCountry_Film");
        });

        modelBuilder.Entity<FilmInfo>(entity =>
        {
            entity.ToView("FilmInfo");
        });

        modelBuilder.Entity<Languages>(entity =>
        {
            entity.HasKey(e => e.LanguageId).HasName("PK_Language");
        });

        modelBuilder.Entity<StudiosInFilms>(entity =>
        {
            entity.ToView("StudiosInFilms");

            entity.Property(e => e.StudioId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Years>(entity =>
        {
            entity.HasKey(e => e.Year).HasName("PK_Year");

            entity.Property(e => e.Year).ValueGeneratedNever();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}